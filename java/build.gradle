import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer

//buildscript {
//    ext.kotlin_version = '1.3.72'
//    repositories {
//        mavenCentral()
//    }
//    dependencies {
//        classpath "org.jetbrains.kotlin.jvm:$kotlin_version"
//    }
//}

buildscript {
    ext.kotlin_version = '1.4.20'
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id "io.freefair.lombok" version "5.3.0"
}
apply plugin: 'base'
apply plugin: 'kotlin'

project.ext.protocol_ver = "1.6.0" // Build version
project.ext.protocol_ver_min = "1.6.0" // Minimum build

version = project.ext.protocol_ver


allprojects {
    group = 'com.github.Fernthedev'

    version = rootProject.version

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()

        maven {
            url = 'https://jitpack.io'
        }

        maven {
            url = 'https://oss.sonatype.org/content/groups/public'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }
    }
}

configure(allprojects.findAll {it.name != "light-chat"}) {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: "io.freefair.lombok"
    apply plugin: 'kotlin'

    ext.netty_ver = "4.1.51.Final"
    ext.jline_ver = "3.16.0"
    ext.log4j_ver = "2.14.0"

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()

        maven {
            url = 'https://jitpack.io'
        }

        maven {
            url = 'https://oss.sonatype.org/content/groups/public'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }
    }


    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

        compile "org.apache.logging.log4j:log4j-api:$log4j_ver"
        compile "org.apache.logging.log4j:log4j-core:$log4j_ver"
        compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_ver"
        compile 'org.slf4j:slf4j-api:1.7.30'

        compile "io.netty:netty-all:$netty_ver"
        implementation "io.netty:netty-transport-native-epoll:$netty_ver"
        implementation "io.netty:netty-transport-native-kqueue:$netty_ver"
        implementation 'com.lmax:disruptor:3.4.2'
        compile 'org.apache.commons:commons-lang3:3.11'
        compile 'com.github.Fernthedev:fern-configmanager:1.3.0'
        compile 'com.google.guava:guava:29.0-jre'
        implementation 'com.googlecode.json-simple:json-simple:1.1.1'
        compile 'com.google.code.gson:gson:2.8.6'
        compile 'com.github.Fernthedev:FernUtils:1.4.0'
        compile group: 'org.apache.maven', name: 'maven-artifact', version: '3.6.3'
    }

    sourceCompatibility = '8'

    java {
        withSourcesJar()
        withJavadocJar()
    }
//    tasks.withType(Javadoc).all { enabled = false }

    javadoc {
        failOnError = false;
    }

    processResources {
//        from 'resources'

        inputs.property "version", project.protocol_ver
        inputs.property "minVersion", project.protocol_ver_min

        from(sourceSets.main.resources.srcDirs) {
            include 'variables.json'


            expand 'version':project.protocol_ver, 'minVersion':project.protocol_ver_min
        }

    }

    afterEvaluate {
        publishing {
            publications {
                maven(MavenPublication) {
                    from(components.java)

                    groupId = "${rootProject.group}.${rootProject.name}"

                    artifactId = "$project.name"

                    println "Publishing $groupId:$artifactId:${project.version}"

                    java {
                        withSourcesJar()
                        withJavadocJar()
                    }
                }
            }
        }
    }


    jar.dependsOn(shadowJar)
    jar.classifier = 'old'
    shadowJar {
//        project.configurations.implementation.canBeResolved = true
//        configurations = [project.configurations.implementation]
        classifier = ''
        transform(Log4j2PluginsCacheFileTransformer)
//        transform(Log4j2PluginsCacheFileTransformer)
        minimize() {
            exclude (dependency('io.netty:netty-transport.*:.*') )
            exclude (dependency('log4j:log4j:.*') )
            exclude (dependency('org.apache.logging.log4j:.*:.*') )
            exclude (dependency('org.slf4j:slf4j-api:.*') )
            exclude (dependency('commons-logging:.*:.*') )
            exclude (dependency('com.pi4j:.*:.*') )
            exclude (dependency('org.fusesource.jansi:.*:.*') )
            exclude (dependency('org.jline:.*:.*') )
            exclude (dependency('net.minecrell:.*:.*') )
            exclude (dependency('com.lmax:disruptor:.*'))
            exclude ('.**/Log4j2Plugins.dat' )
        }
    }

    sourceSets {
        main.kotlin.srcDirs += 'src/main/java'
        main.java.srcDirs += 'src/main/kotlin'
    }

}
repositories {
    mavenCentral()
}
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
